{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","concat","Object","toConsumableArray","title","book","author","id","uuid","filter","BookContext","createContext","BookContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","books","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","useContext","className","length","BookDetails","_ref","onClick","BookList","map","components_BookDetails","key","NewBookForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setAuthor","onSubmit","e","preventDefault","required","placeholder","onChange","target","App","contexts_BookContext","components_Navbar","components_BookList","BookForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5ddc1b7e.chunk.js","sourcesContent":["import uuid from 'uuid/v1'\r\n\r\nexport const bookReducer = (state, action) => {\r\n    switch(action.type) {\r\n        case 'ADD_BOOK':\r\n            return[...state, {\r\n                title: action.book.title,\r\n                author: action.book.author,\r\n                id: uuid()\r\n            }]\r\n        case 'REMOVE_BOOK':\r\n            return state.filter(book => book.id !== action.id)\r\n        default:\r\n            return state\r\n    }\r\n}","import React, { createContext, useReducer, useEffect } from 'react'\r\nimport { bookReducer } from '../reducers/bookReducer'\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n    const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n        const localData = localStorage.getItem('books')\r\n        return localData ? JSON.parse(localData) : []\r\n    })\r\n    useEffect(() => {\r\n        localStorage.setItem('books', JSON.stringify(books))\r\n    }, [books])\r\n    return(\r\n        <BookContext.Provider value={{books, dispatch}}>\r\n            { props.children }\r\n        </BookContext.Provider>\r\n    )\r\n}\r\n\r\nexport default BookContextProvider\r\n","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext'\r\n\r\nconst Navbar = () => {\r\n    const { books } = useContext(BookContext)\r\n    \r\n    return(\r\n        <div className=\"navbar\">\r\n            <h1>Book Reading List</h1>\r\n            <p>Currently you have { books.length } books to get through...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext'\r\n\r\nconst BookDetails = ({ book }) => {\r\n    const { dispatch } = useContext(BookContext)\r\n    return(\r\n        <li onClick={() => dispatch({type: 'REMOVE_BOOK', id: book.id})}>\r\n            <div className=\"title\">{book.title}</div>\r\n            <div className=\"author\">{book.author}</div>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default BookDetails","import React, { useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext'\r\nimport BookDetails from './BookDetails'\r\n\r\nconst BookList = () => {\r\n    const { books } = useContext(BookContext)\r\n    \r\n    return books.length ? (\r\n        <div className=\"book-list\">\r\n            <ul>\r\n                {books.map(book => {\r\n                    return <BookDetails book={book} key={book.id} />\r\n                })}\r\n            </ul>\r\n        </div>\r\n    ) : (\r\n        <div className=\"empty\">No Books to read. :P</div>\r\n    )\r\n}\r\n\r\nexport default BookList","import React, { useContext, useState } from 'react'\r\nimport { BookContext } from '../contexts/BookContext'\r\n\r\nconst NewBookForm = () => {\r\n    const { dispatch } = useContext(BookContext)\r\n    const [title, setTitle] = useState('')\r\n    const [author, setAuthor] = useState('')\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        dispatch({type: 'ADD_BOOK', book: {\r\n            title, author\r\n        }})\r\n        setTitle('')\r\n        setAuthor('')\r\n    }\r\n    return(\r\n        <form onSubmit={handleSubmit}>\r\n            <input required type=\"text\" placeholder=\"book title\" value={title} onChange={(e) => setTitle(e.target.value)} />\r\n            <input required type=\"text\" placeholder=\"book author\" value={author} onChange={(e) => setAuthor(e.target.value)}/>\r\n            <input type=\"submit\" value=\"ADD BOOK\" />\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default NewBookForm","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/BookList';\nimport NewBookForm from './components/BookForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}